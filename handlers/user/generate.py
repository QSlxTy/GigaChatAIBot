import os
import time

from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, FSInputFile
from sqlalchemy.orm import sessionmaker

from bot_start import bot, logger
from integrations.database.models.questions import get_random_questions
from keyboards.user.user_keyboard import end_story_kb
from src.config import BotConfig
from utils.gigachat_api import generate_main
from utils.s3 import delete_photo_from_yandex_s3


async def start_generate(call: types.CallbackQuery, state: FSMContext, session_maker: sessionmaker):
    data = await state.get_data()
    await call.message.answer_photo(
        photo=FSInputFile(BotConfig.start_generation_photo_path),
        caption='<code>–û—Ç–ª–∏—á–Ω–æ</code>, –Ω–∞—á–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏ ‚åõÔ∏è\n\n'
                '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ <code>15 –º–∏–Ω—É—Ç</code>, –Ω–æ –æ–±—ã—á–Ω–æ —è —Å–ø—Ä–∞–≤–ª—è—é—Å—å –±—ã—Å—Ç—Ä–µ–µ. –ü—Ä–∏—à–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç'
    )
    if data.get('path_list'):
        path_list = data['path_list']
    else:
        path_list = []
    try:
        file_path_list = await generate_main(
            data['answers_list'], path_list, data['url_list'], call.from_user.id, data['style'], call.data.split(':')[1],
            session_maker
        )
    except Exception as _ex:
        logger.error(f'Generation error {call.from_user.id} --> {_ex}')
        await bot.send_message(
            chat_id=call.from_user.id,
            text='–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã ‚öôÔ∏è\n'
                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ /start\n\n'
                 '‚ùóÔ∏è<i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–Ω –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏</i>',
            reply_markup=await end_story_kb()
        )
        await state.clear()
        questions = await get_random_questions(session_maker)
        await state.update_data(questions=questions)
        return
    await call.message.answer(
        text='–í–æ—Ç –≤–∞—à–∞ –ª–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π üòä'
    )

    time.sleep(2)
    await bot.send_media_group(
        chat_id=call.from_user.id,
        media=[
            InputMediaPhoto(type='photo', media=FSInputFile(file_path_list[0])),
            InputMediaPhoto(type='photo', media=FSInputFile(file_path_list[1])),
            InputMediaPhoto(type='photo', media=FSInputFile(file_path_list[2])),
            InputMediaPhoto(type='photo', media=FSInputFile(file_path_list[3])),
            InputMediaPhoto(type='photo', media=FSInputFile(file_path_list[4]))
        ]
    )
    for url in file_path_list:
        await delete_photo_from_yandex_s3(url.split('https://storage.yandexcloud.net/chatbotgigacht')[-1][1:])
    for path in os.listdir(f'files/{call.from_user.id}/'):
        os.remove(f'files/{call.from_user.id}/{path}')
    for path in os.listdir(f'files/{call.from_user.id}_generated/'):
        os.remove(f'files/{call.from_user.id}_generated/{path}')
    # for name in data['name_list']:
    #     await s3.delete_file_bucket(name)
    await bot.send_message(
        chat_id=call.from_user.id,
        text='–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–≤–µ–ª–∏ –∏—Ç–æ–≥–∏ –≥–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n'
             '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —è—Ä–∫—É—é –∏—Å—Ç–æ—Ä–∏—é?\n'
             '–í–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –Ω–∞—à–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ',
        reply_markup=await end_story_kb()
    )
    await state.clear()
    questions = await get_random_questions(session_maker)
    await state.update_data(questions=questions)


def register_handler(dp: Dispatcher):
    dp.callback_query.register(start_generate, F.data.startswith('choose_sex'))
